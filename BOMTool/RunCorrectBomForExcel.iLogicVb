 
'AddReference "System.Core"
'AddReference "System.Linq"
'uncomment the following line before running the iLogic
'AddReference "BomTool.dll"
'Imports System.Collections.Generic
'Imports System
'Imports System.IO
Imports System.Data.Linq
Imports BomTool


''' <summary>
''' Our Main program.
''' </summary>
''' <remarks></remarks>
Sub Main()
    Dim XTCS As New BomTool.Class1
    Dim PartsList As List(Of BomTool.BomRowItem)
'pass the local variables to our external .dll
    XTCS.InventorApplication = ThisApplication
    Dim oDoc As AssemblyDocument = ThisApplication.ActiveDocument
    'Dim oDoc As AssemblyComponentDefinition = ThisApplication.ActiveDocument.ComponentDefinition

    ' Set a reference to the BOM
    Dim oBOM As BOM
    oBOM = oDoc.ComponentDefinition.BOM

    oBOM.StructuredViewFirstLevelOnly = True

    ' Make sure that the structured view is enabled.
    oBOM.StructuredViewEnabled = True

    'Set a reference to the "Structured" BOMView
    Dim oBOMView As BOMView
    oBOMView = oBOM.BOMViews.Item("Structured")

    Dim tr As transaction
    tr = ThisApplication.TransactionManager.StartTransaction(ThisApplication.ActiveDocument, "Create Excel Bom From This Assembly")
    PartsList = QueryBOMRowProperties(oBOMView.BOMRows, InputBox("Classification?", "Hit N,C & Tab...", "UKU"))
    Call XTCS.BeginReformatBomForExcel(PartsList)
    Call XTCS.UpdateInventorPartsList(oBOMView.BOMRows, PartsList)
    oBOMView.Sort("Item", 1)
    ReturnPartsListToExcel(PartsList)
    tr.End()
    InventorVb.DocumentUpdate()
End Sub

''' <summary>
''' Queries the BOM Row properties and generates a list to pass externally for sorting.
''' </summary>
''' <param name="Doc">The parent assembly Document</param>
''' <param name="oBOMRows"></param>
''' <param name="Classification"></param>
''' <returns></returns>
''' <remarks></remarks>
Private Function QueryBOMRowProperties(ByVal oBOMRows As BOMRowsEnumerator, ByVal Classification As String) As List(Of BomTool.BomRowItem)
    Dim tmplist As List(Of BomTool.BomRowItem) = New List(Of BomTool.BomRowItem)
    ItemTab = ItemTab + 3
    ' Iterate through the contents of the BOM Rows.
    Dim i As Long
    For i = 1 To oBOMRows.Count

        ' Get the current row.
        Dim oRow As BOMRow
        oRow = oBOMRows.Item(i)

        'Set a reference to the primary ComponentDefinition of the row
        Dim oCompDef As ComponentDefinition
        oCompDef = oRow.ComponentDefinitions.Item(1)

        'get the PropertySets we need
        Dim invProjProperties As PropertySet = oCompDef.Document.PropertySets.Item("{32853F0F-3444-11D1-9E93-0060B03C1CA6}")
        Dim invSummaryiProperties As PropertySet = oCompDef.Document.PropertySets.Item("{F29F85E0-4FF9-1068-AB91-08002B27B3D9}")
        Dim invCustomPropertySet As PropertySet = oCompDef.Document.PropertySets.Item("Inventor User Defined Properties")


        Dim oPartNumProperty As String = invProjProperties.ItemByPropId(PropertiesForDesignTrackingPropertiesEnum.kPartNumberDesignTrackingProperties).Value
        Dim oRevProperty As String = invSummaryiProperties.ItemByPropId(PropertiesForSummaryInformationEnum.kRevisionSummaryInformation).Value
        Dim oDescripProperty As String = invProjProperties.ItemByPropId(PropertiesForDesignTrackingPropertiesEnum.kDescriptionDesignTrackingProperties).Value
        Dim oItemNo As String = oRow.ItemNumber
        Dim oClassification As String = Classification
        'If Not invCustomPropertySet.Item("01 - Protective Marking") = Nothing Then
        '    oClassification = invCustomPropertySet.Item("01 - Protective Marking").Value
        'Else
        '    oClassification = Classification
        'End If
        Dim oMaterial As String
        If TypeOf oCompDef.Document Is AssemblyDocument Then
            'Messagebox.Show("Assembly, no Material!")
            omaterial = ""
        Else
            'Messagebox.Show("Part!")
            omaterial = oCompDef.Material.Name
        End If
        Dim oQty As Long = oRow.ItemQuantity
        Dim oVendorProperty As String = invProjProperties.ItemByPropId(PropertiesForDesignTrackingPropertiesEnum.kVendorDesignTrackingProperties).Value
        Dim oCommentsProperty As String = invSummaryiProperties.ItemByPropId(PropertiesForSummaryInformationEnum.kCommentsSummaryInformation).Value

        Dim rowItem As BomTool.BomRowItem = New BomTool.BomRowItem()

        rowItem.FileName = oCompDef.Document.FullFileName
        rowItem.PartNo = oPartNumProperty
        rowItem.Rev = oRevProperty
        rowItem.Descr = oDescripProperty
        rowItem.ItemNo = oItemNo
        rowItem.Classification = oClassification
        rowItem.Material = oMaterial
        rowItem.Qty = oQty
        rowItem.Vendor = oVendorProperty
        rowItem.Comments = oCommentsProperty
        rowItem.BomRowType = GetBomRowTypeByFileName(oCompDef.Document.FullFileName)

        tmplist.Add(rowItem)
    Next
    Return tmplist
End Function

''' <summary>
''' Returns the BomRowType int
''' </summary>
''' <param name="DocName"></param>
''' <returns></returns>
''' <remarks></remarks>
Public Function GetBomRowTypeByFileName(DocName As String) As Long
    If DocName.Contains("SP-") Then
        'MessageBox.Show(DocName & " Returns value 1")
        Return 1
    ElseIf DocName.EndsWith(".iam") Then
        'MessageBox.Show(DocName & " Returns value 2")
        Return 2
    ElseIf DocName.Contains("DT-") Then
        'MessageBox.Show(DocName & " Returns value 3")
        Return 3
    ElseIf DocName.Contains("COTS-") Or docname.Contains("Content") Or Docname.Contains("Imported Components") Then
        'MessageBox.Show(DocName & " Returns value 4")
        Return 4
    Else 'These are parts which don't match any of the above criteria
        'MessageBox.Show(DocName & " Returns value 4")
        Return 4
    End If
End Function

''' <summary>
''' Returns our sorted list to Excel or leaves it as-is if we know the parts list can fit on drawing sheet one of the assembly.
''' </summary>
''' <param name="oPartsList">our sorted, renumbered partslist object</param>
''' <remarks></remarks>
Public Sub ReturnPartsListToExcel(ByVal oPartsList As List(Of BomTool.BomRowItem))

    Dim booleanParam As Boolean = InputRadioBox("Will the Parts list fit on the drawing?", "Yes", "No", booleanParam, Title:="Title")
    If booleanParam Then
        'we're done here because the parts list will fit.
        Exit Sub
    Else
        'we need to make an Excel file.
        Dim filetab As String = "DETAILS"
        Dim xlTemplate As String = "C:\LEGACY VAULT WORKING FOLDER\Designs\iLogic\Templates\BOM_Master.xlsx"
        Dim excelApp = CreateObject("Excel.Application")
        Dim excelWorkBook
        Dim excelWorkSheet
        excelApp.Visible = True
        excelApp.DisplayAlerts = False

        If dir(xltemplate) <> "" Then
            'MessageBox.Show("Excel file found for output, continuing!")
            excelworkbook = excelApp.workbooks.open(xltemplate)
            excelSheet = excelWorkbook.Worksheets(2).Activate
        Else
            MessageBox.Show("No excel file found for output!")
            Exit Sub
        End If
        'FilesArray = GoExcel.CellValues("C:\LEGACY VAULT WORKING FOLDER\Designs\iLogic\Templates\BOM_Master.xlsx", filetab, "A3", "A4") ' sets excel to the correct sheet!
        Dim MyRow As Integer = 2
        Dim specHeader As Boolean = False
        Dim saHeader As Boolean = False
        Dim dpHeader As Boolean = False
        Dim cotsHeader As Boolean = False
        For Each oItem As BomRowItem In oPartsList
            If oItem.ItemNo = 0 And specHeader = False Then
                excelapp.range("A" & MyRow).Select()
                excelapp.ActiveCell.Value = "SPECIFICATIONS"
                'GoExcel.CellValue("A" & MyRow) = "SPECIFICATIONS"
                specHeader = True
                MyRow = MyRow + 1
            ElseIf oItem.ItemNo >= 1 And oItem.ItemNo < 200 And saHeader = False Then
                excelapp.range("A" & MyRow).Select()
                excelapp.ActiveCell.Value = "SUB ASSEMBLIES"
                'GoExcel.CellValue("A" & MyRow) = "SUB ASSEMBLIES"
                saHeader = True
                MyRow = MyRow + 1
            ElseIf oitem.ItemNo >= 200 And oItem.ItemNo < 500 And dpHeader = False Then
                excelapp.range("A" & MyRow).Select()
                excelapp.ActiveCell.Value = "DETAILED PARTS"
                'GoExcel.CellValue("A" & MyRow) = "DETAILED PARTS"
                dpHeader = True
                MyRow = MyRow + 1
            ElseIf oItem.ItemNo >= 500 And cotsheader = False Then
                excelapp.range("A" & MyRow).Select()
                excelapp.ActiveCell.Value = "COTS PARTS"
                'GoExcel.CellValue("A" & MyRow) = "COTS PARTS"
                cotsHeader = True
                MyRow = MyRow + 1
                'Else
                '    excelapp.range("A" & MyRow).Select()
                '    excelapp.ActiveCell.Value = "SOMETHING ELSE ENTIRELY!?"
                '    'GoExcel.CellValue("A" & MyRow) = "SOMETHING ELSE ENTIRELY!?"
                '    MyRow = MyRow + 1
            End If
            excelapp.range("A" & MyRow).Select()
            If oItem.ItemNo = 0 Then
                excelapp.ActiveCell.Value = ""
            Else
                excelapp.ActiveCell.Value = oItem.ItemNo.ToString()
            End If
            'GoExcel.CellValue("A" & MyRow) = oItem.ItemNo
            excelapp.range("B" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.PartNo
            'GoExcel.CellValue("B" & MyRow) = oItem.PartNo
            excelapp.range("C" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.Rev
            'GoExcel.CellValue("C" & MyRow) = oItem.Rev
            excelapp.range("D" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.Descr
            'GoExcel.CellValue("D" & MyRow) = oItem.Descr
            excelapp.range("E" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.Classification
            'GoExcel.CellValue("E" & MyRow) = oItem.Classification
            excelapp.range("F" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.Material
            'GoExcel.CellValue("F" & MyRow) = oItem.Material
            excelapp.range("G" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.Qty.ToString()
            'GoExcel.CellValue("G" & MyRow) = oItem.Qty
            excelapp.range("H" & MyRow).Select()
            excelapp.ActiveCell.Value = ""
            'GoExcel.CellValue("H" & MyRow) = ""
            excelapp.range("H" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.Vendor
            'GoExcel.CellValue("I" & MyRow) = oItem.Vendor
            excelapp.range("H" & MyRow).Select()
            excelapp.ActiveCell.Value = ""
            'GoExcel.CellValue("J" & MyRow) = ""
            excelapp.range("K" & MyRow).Select()
            excelapp.ActiveCell.Value = oItem.Comments
            'GoExcel.CellValue("K" & MyRow) = oItem.Comments
            MyRow = MyRow + 1
        Next
        excelapp.Columns.Autofit()
        excelWorkbook.SaveAs(System.IO.Path.GetDirectoryName(ThisApplication.ActiveDocument.FullFileName) & "\" & System.IO.Path.GetFileNameWithoutExtension(ThisApplication.ActiveDocument.FullFileName) & ".xlsx")
    End If
End Sub
